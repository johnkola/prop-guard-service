name: CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') && format('docker.io/{0}', github.repository) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        id: deploy
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          # This is a placeholder for actual deployment
          # In production, you would:
          # 1. SSH to staging server
          # 2. Pull latest Docker image
          # 3. Update docker-compose with new version
          # 4. Restart services
          echo "Deploying to staging environment..."
          echo "url=https://staging.propguard.io" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests against staging..."

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: docker-build-push
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Generate Swagger docs
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g cmd/server/main.go -o docs

      - name: Build release binaries
        run: |
          # Build for multiple platforms
          platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
          
          for platform in "${platforms[@]}"; do
            GOOS="${platform%/*}"
            GOARCH="${platform#*/}"
            output_name="propguard-${GOOS}-${GOARCH}"
            
            if [ "$GOOS" = "windows" ]; then
              output_name="${output_name}.exe"
            fi
            
            echo "Building for $GOOS/$GOARCH..."
            GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Commit=${{ github.sha }}" \
              -o "dist/${output_name}" \
              ./cmd/server
            
            # Create tar.gz for unix systems
            if [ "$GOOS" != "windows" ]; then
              tar -czf "dist/${output_name}.tar.gz" -C dist "${output_name}"
              rm "dist/${output_name}"
            else
              # Create zip for windows
              cd dist && zip "${output_name}.zip" "${output_name}" && cd ..
              rm "dist/${output_name}"
            fi
          done

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## What's Changed" > CHANGELOG.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s by @%an" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Docker Images" >> CHANGELOG.md
          echo "* \`ghcr.io/${{ github.repository }}:${{ github.ref_name }}\`" >> CHANGELOG.md
          echo "* \`docker.io/${{ github.repository }}:${{ github.ref_name }}\`" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version in docs
        run: |
          # Update version references in documentation
          VERSION=${{ github.ref_name }}
          sed -i "s/version: .*/version: $VERSION/" README.md
          
      - name: Create PR for doc updates
        uses: peter-evans/create-pull-request@v5
        with:
          title: "docs: update version to ${{ github.ref_name }}"
          body: "Automated PR to update documentation for release ${{ github.ref_name }}"
          branch: docs/update-version-${{ github.ref_name }}
          commit-message: "docs: update version to ${{ github.ref_name }}"